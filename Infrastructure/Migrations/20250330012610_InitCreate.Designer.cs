// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(MTGtradeDbContext))]
    [Migration("20250330012610_InitCreate")]
    partial class InitCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entites.Card", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Artist")
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("ArtistIds")
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("BoosterTypes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BorderColor")
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("ColorIdentity")
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("Colors")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("ConvertedManaCost")
                        .HasColumnType("float");

                    b.Property<int?>("EdhrecRank")
                        .HasColumnType("int");

                    b.PrimitiveCollection<string>("Finishes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FlavorText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FrameVersion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("HasFoil")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasNonFoil")
                        .HasColumnType("bit");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsStarter")
                        .HasColumnType("bit");

                    b.PrimitiveCollection<string>("Keywords")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Layout")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ManaCost")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("ManaValue")
                        .HasColumnType("float");

                    b.Property<string>("MtgjsonV4Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MultiverseId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OriginalText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginalType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Power")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rarity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScryfallCardBackId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ScryfallId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ScryfallIllustrationId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScryfallOracleId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Toughness")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SetId");

                    b.HasIndex("Name", "Number", "SetId", "Layout")
                        .IsUnique()
                        .HasFilter("[Layout] IS NOT NULL");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("Domain.Entites.CardForeignData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FlavorText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.ToTable("CardForeignData");
                });

            modelBuilder.Entity("Domain.Entites.CardRuling", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.ToTable("CardRuling");
                });

            modelBuilder.Entity("Domain.Entities.Set", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Block")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Series")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sets");
                });

            modelBuilder.Entity("Domain.Entites.Card", b =>
                {
                    b.HasOne("Domain.Entities.Set", "Set")
                        .WithMany("Cards")
                        .HasForeignKey("SetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Set");
                });

            modelBuilder.Entity("Domain.Entites.CardForeignData", b =>
                {
                    b.HasOne("Domain.Entites.Card", "Card")
                        .WithMany("ForeignData")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");
                });

            modelBuilder.Entity("Domain.Entites.CardRuling", b =>
                {
                    b.HasOne("Domain.Entites.Card", "Card")
                        .WithMany("Rulings")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");
                });

            modelBuilder.Entity("Domain.Entites.Card", b =>
                {
                    b.Navigation("ForeignData");

                    b.Navigation("Rulings");
                });

            modelBuilder.Entity("Domain.Entities.Set", b =>
                {
                    b.Navigation("Cards");
                });
#pragma warning restore 612, 618
        }
    }
}
